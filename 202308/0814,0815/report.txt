Memory Orderingについて

-------------------------------------------------------------------------------------------------------
Rustのドキュメント
https://doc.rust-lang.org/std/sync/atomic/enum.Ordering.html

アトミックなMemory Ordering

Memory Ordering はアトミックな操作(演算)メモリを同期させる方法を指定する

Ordering::Relaxed => 操作(演算)による直接触れられるメモリのみが同期される

Ordering::SecCst => (sequentially consistent)
一方、Ordering::SeqCst操作のストアとロードのペアは、すべてのスレッドにわたってそのような操作の合計順序を保持しながら、他のメモリを同期させる。

・Relaxed
　順番を抑制しない、ただatomicな演算

・Release
　ストアと結合させたとき、以前のすべての操作は、Acquire(より強い)順序であるload(ストアした値を読むload)
　より前に順序付けされる

　ロードとストアを組み合わせる操作にこの順序付けを使用すると、Relaxedロード操作になる

　この順序付けは、ストアを実行できる操作にのみ適用できる

・Acquire
　ロードと結合させたとき、ロードされた値がRelease(より強い)順序のストア命令によって書き換えられたら、
　そのあとの命令をそのストアより後に順番づける

　ロードとストアを組み合わせる操作にこの順序付けを使用すると、Relaxedストア操作になる

　この順序付けは、ロードを実行できる操作にのみ適用できる

・AcqRel
　Acquire と Release の両方の効果を併せ持つ
　ロードに対してはAcquire順序を使用し、ストアに対してはRelease順序を使用する。

　compare_and_swapの場合、操作がストアを実行せずに終わる可能性があり、
　したがって、Acquire順序を持つだけであることに注意。
　しかし、AcqRelは決してRelaxedアクセスを実行しない。

　この順序付けは、ロードとストアの両方を組み合わせた操作にのみ適用される。

・SeqCst
　Acquire/Release/AcqRel（それぞれload、store、load-with-store操作用）のように、
　すべてのスレッドが同じ順序ですべての順次一貫した操作を見るという追加保証がある。
---------------------------------------------------------------------------------------------------
C++のリファレンス
https://en.cppreference.com/w/cpp/atomic/memory_order

std::memory_orderは、通常の非アトミックメモリアクセスを含むメモリアクセスを、
アトミック操作の周囲でどのように順序付けるかを指定する。

マルチコアシステムに制約がない場合、複数のスレッドが同時に複数の変数の読み取りと書き込みを行うと、
あるスレッドは、別のスレッドが書き込んだ順番とは異なる順番で値が変化するのを観察することができる。

実際、変更の見かけ上の順序は、複数のリーダースレッド間で異なることさえある。
ユニプロセッサ・システムでも、メモリ・モデルによってコンパイラが変換を行うため、同様の効果が発生することがある。

ライブラリのすべてのアトミック演算のデフォルトの動作は、逐次一貫した順序を提供します。
このデフォルトはパフォーマンスを低下させますが、ライブラリのアトミック演算にstd::memory_order引数を追加して、
コンパイラとプロセッサがその演算に強制しなければならない、アトミック性以外の制約を正確に指定することができます。

・Relaxed operation
  他の読み書きに同期や順序の制約が課されることはなく、この操作のアトミック性だけが保証される。

・consume
 consumeメモリ順序でのロード操作は、影響を受けるメモリ位置に対して消費操作を実行する
 現在ロードされている値に依存している現在のスレッドでは、このロードの前に順序を変更することはできません。
 同じアトミック変数を解放する他のスレッドのデータ依存変数への書き込みは、現在のスレッドで見える。
 ほとんどのプラットフォームでは、これはコンパイラの最適化にのみ影響する

・Acquire
このメモリ順序でのロード操作は、影響を受けるメモリ位置に対してアクワイア操作を実行する。
このロードの前に、現在のスレッドで読み取りや書き込みの順序を変更することはできない。
同じアトミック変数を解放する他のスレッドでの書き込みはすべて、現在のスレッドで見ることができる。

Formal Description
スレッド間同期とメモリ順序付けは、式の評価と副作用が異なる実行スレッド間でどのように順序付けされるかを決定する。